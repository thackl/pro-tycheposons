#!/usr/bin/env perl
# Created: 10 Apr 2019
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
no warnings "qw";
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Data::Dumper;
use File::Basename;
use FindBin qw($RealBin);
use List::Util qw(min max);
use POSIX;

my $base_dir = $RealBin;
$base_dir =~ s/bin$//;
my $run_time = strftime "%Y%m%d-%H%M%S", localtime time;

GetOptions (
    "out-dir|o=s" => \(my $out = "irve-finder-$run_time"),
    "irve|i=s" => \(my $irve_file = "$base_dir/data/irve-v6.hmm"),
    "irve-info|x=s" => \(my $irve_info_file = "$base_dir/data/irve-v6-info.tsv"),
    "faa|a=s" => \(my $faa_file),
    "virus|v=s" => \(my $virus_file = ""),
    "trna|r=s" => \(my $trna_file),
    "pre1=s" => \(my $pre1_file),
    "threads|t=i" => \(my $threads = 4),
    "help|h!" => \(my $help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

if ($help || @ARGV == 0 || @ARGV > 2){
    print "Find integrated replicative vesicle-transmitted elements (IRVEs)\n";
    print "in genomes, and plot them.\n\n";
    print "Usage: irve_finder [options] {.fna | .fna .gff | .gff-with-seq}\n";
    printf " %-19s  %s\n", "-a/--faa", "protein file in fasta format [get from gff+fna if req.]";
    printf " %-19s  %s\n", "-i/--irve", "IRVE .hmm file or precomputed hmmer hits (.tbl/.tsv) [data/irve-v6.hmm]";
    printf " %-19s  %s\n", "-x/--irve-info", "irve info file [data/irve-v6-info.hmm]";
    printf " %-19s  %s\n", "-v/--virus", "Virus .hmm file or precomputed hmmer hits (.tbl/.tsv) [$virus_file]";
    printf " %-19s  %s\n", "-r/--trna", "precomputed full-length tRNA fasta, use if .fna might not contain full-length tRNAs at all";
    printf " %-19s  %s\n", "-p/--pre1", "PRE1 repeat nucleotide hmm/tbl/tsv";
    printf " %-19s  %s\n", "-t/--threads", "number of threads to use in external commands";
    printf " %-19s  %s\n", "-o/--out", "write to this dir/prefix [./irve-finder]";
    printf " %-19s  %s\n", "-h/--help", "show this help";
    printf " %-19s  %s\n", "-D/--debug", "show debug messages";
    print "\nFor .fna only, genes will be predicted with prodigal to create a gff.\n";
    print "With precomputed irve/virus/... hits, no .fna/.faa is necessary.\n";
    print "Program directory was located at '$base_dir'\n";

    exit 0;
}

# check positional input files: fna/gff
my ($gff_file, $fna_file, $pre);
if (@ARGV == 1) {
    if (qx(head -c1 $ARGV[0]) eq ">") {
        $fna_file = $ARGV[0];
    }else {
        $gff_file = $ARGV[0];
    }
}else {
    ($fna_file, $gff_file) = @ARGV;
}

$pre = basename($ARGV[0]);
$pre =~ s/\.[^.]+$//;

# setup out dir
$out||=".";
unless (-d $out) { mkdir $out or die $!; }

# get contig length
if (!$fna_file){
    $fna_file = out(".fna");
    get_fna_from_gff($gff_file, $fna_file) unless -e $fna_file;
}
my $contig_length_file = out("-contig-length.tsv");
run(qq(seq-len $fna_file > $contig_length_file)) unless -e $contig_length_file;

# annotate genomes if necessary
my $predict_trna = 0;
if (!$gff_file){ # run prodigal to get $faa_file
    $predict_trna++;
    $gff_file = out(".gff");
    $faa_file = out(".faa");
    if (!-e $gff_file && $faa_file) {
        print STDERR "Predicting genes wit prodigal\n";
        run(qq(prodigal -p meta -i $fna_file -f gff -o $gff_file -a $faa_file));
        # fix prodigal gff IDs (lack locus prefix, just numbered 1_1, 1_2, ...)
        run('perl -i -pe \'s/(\S+)(.*ID=)[^;]+(_\d+;)/$1$2$1$3/;\' '.$gff_file);
    }
}

# create protein file if necessary
my $need_faa = ($irve_file && $irve_file !~ /(tbl|tsv)$/) ||
    ($virus_file && $virus_file !~ /(tbl|tsv)$/);
if (!$faa_file && $need_faa){
    $faa_file = out(".faa");
    if (!-e $faa_file) {
        print STDERR "Extracting proteins from gff\n";
        get_faa_from_gff($gff_file, $faa_file);
    }
}

print STDERR "\nExtracting features from gff\n";
my $cds_bed = out("-cds.bed");
-e $cds_bed || extract_features($gff_file, $cds_bed, "CDS");
my $gap_bed = out("-gap.bed");
-e $gap_bed || extract_features($gff_file, $gap_bed, "gap");
my $trna_bed = out("-trna.bed");
if (!-e $trna_bed){
    $predict_trna
        ? predict_trnas($fna_file, $trna_bed, "tRNA,tmRNA")
        : extract_features($gff_file, $trna_bed, "tRNA,tmRNA");
}

print STDERR "\nGathering annotations\n";
my $irve_raw_hits = out("-irve-raw-hits.tsv");
-e $irve_raw_hits || gather_annotations($irve_file, $irve_raw_hits, $faa_file) if $irve_file;
my $virus_hits  = out("-virus-hits.tsv");
-e $virus_hits || gather_annotations($virus_file, $virus_hits, $faa_file) if $virus_file;
my $pre1_hits  = out("-pre1-hits.tsv");
-e $pre1_hits || ($pre1_hits = gather_annotations($pre1_file, $pre1_hits, $fna_file, 1)) if $pre1_file;

print STDERR "\nSearching for (partial) tRNAs\n";
my $trna_hits = out("-trna-hits.bed");
-e $trna_hits || ($trna_hits = gather_trnas($trna_file, $trna_hits));

print STDERR "\nPrefiltering hits\n";
my $irve_hits = out("-irve-hits.tsv");
-e $irve_hits || run(qq(Rscript $RealBin/irve_hitfilter.R $irve_raw_hits $cds_bed $irve_info_file $irve_hits 2>&1), 1);

# TODO: run att-dup blast for int-seeds
print STDERR "\nScanning for attachment site duplications\n";
my $att_sites = out("-att-m7.tsv");
-e $att_sites || search_att_sites($att_sites);

print STDERR "\nDetecting IRVE elements\n";
my $irve_tsv = out("-elements.tsv");
-e $irve_tsv || run(qq(Rscript $RealBin/irve_finder.R $irve_hits $trna_hits $att_sites $contig_length_file $irve_tsv 2>&1), 1);

print STDERR "\nGenerating plots\n";
my $irve_pdf = out("-elements.pdf");
-e $irve_pdf || run(qq(Rscript $RealBin/irve_plotter.R $irve_hits $cds_bed $att_sites $trna_hits $irve_tsv $gap_bed $pre1_hits $virus_hits $irve_info_file $irve_pdf 2>&1), 1);

print STDERR "\nFinal cluster: $irve_tsv\nFinal plots:   $irve_pdf\n";

#------------------------------------------------------------------------------#
sub out{
    my ($s, $p, $o) = (@_, $pre, $out);
    return "$o/$p$s";
}

sub get_faa_from_gff{
    my($gff_file, $faa_file) = @_;
    run(qq(seqkit subseq --quiet --feature CDS --gtf $gff_file $fna_file | seqkit translate --trim > $faa_file));
}

sub get_fna_from_gff{
    my ($gff_file, $fna_file) = @_;
    run(qq(sed -n '/##FASTA/,\${n;p}' $gff_file > $fna_file));
    die "##FASTA section missing in .gff" if -s $fna_file;
}

sub gather_annotations{
    my ($file, $out_file, $fa_file, $nuc) = @_;
    my $out_pre = $out_file =~ s/\.[^.]+$//r;
    my $tbl_file = "$out_pre.tbl";
    my $tmp_file = "$out_pre.tmp";
    my $tsv_file = "$out_pre.tsv";

    if ($file !~ /(tbl|tsv)$/ && ! -e $tbl_file){
        if ($nuc) {
            run(qq(hmmpress $file)) unless -e $file.".h3i";
            run(qq(nhmmscan  -o /dev/null -E 1 --cpu $threads --tblout $tbl_file $file $fa_file));
        }else{
            run(qq(hmmsearch --cpu $threads --tblout $tbl_file -o /dev/null $file $fa_file));
        }
        $file = $tbl_file;
    }
    if ($file =~ /tbl$/ && ! -e $tmp_file) {
        run(qq(hmmer-tbl2tsv $file > $tmp_file));
        $file = $tmp_file;
        if($nuc){
            run(qq(tail -n+2 $file | tsv-select -f3,7,8,13,12 > $tsv_file));
        } else {
            run(qq(tail -n+2 $file | cut -f1,3,5,6 > $tsv_file));
        }
    }else { # precomputed
        $tsv_file = $file
    }
    return $tsv_file;
}

sub extract_features{
    my ($gff_file, $out_file, $feat) = @_;
    run(qq(gff2bed $gff_file --feat $feat > $out_file));
    return "$out_file";
}

sub gather_trnas{
    my ($trna_file) = @_;
    if (!$trna_file){ # get from predictions/annotations
        $trna_file = "$out/$pre-trna.ffn";
        run(qq(seqkit subseq --quiet --bed $trna_bed $fna_file | perl -pe 's/\\s/||/ if /^>/;' | seqkit rename >$trna_file));
    }
    return $trna_file if $trna_file =~ /bed$/; # assume precomputed

    run(qq(makeblastdb -dbtype nucl -in $trna_file)) if $trna_file;
    my $trna_blast_tsv = "$out/$pre-trna-blastn.tsv";
    my $trna_blast_tmp = "$out/$pre-trna-blastn.tmp";
    my $trna_blast_bed = "$out/$pre-trna-blastn.bed";
    my $trna_part = "$out/$pre-trna-hits-partial.bed";
    my $trna_full = "$out/$pre-trna-hits-full.bed";
    my $trna_hits = "$out/$pre-trna-hits.bed";

    run(qq(blastn -num_threads $threads -task blastn -db $trna_file -query $fna_file -reward 1 -penalty -1 -gapopen 2 -gapextend 1 -perc_identity 80 -evalue 10e-2 -max_target_seqs 100000 -outfmt 7 >$trna_blast_tsv));
    my $got_hits = qx(grep -vcm1 '^#' $trna_blast_tsv);
    chomp($got_hits);
    if (!$got_hits) { # no hits
        print "Found no partial tRNA hits\n";
        qx(echo "" > $trna_hits);
        return $trna_hits;
    }
    run(qq(cat $trna_blast_tsv | blast2bed -qa | bedtools merge -delim ";" -c 4,5,6,5 -o collapse,max,distinct,collapse >$trna_blast_tmp));

    open(TMP, $trna_blast_tmp) or die $!;
    open(BED, ">$trna_blast_bed") or die $!;;
    while (<TMP>) {
        chomp();
        my @F= split("\t", $_);
        my @scores = split(";", $F[6]);
        my @trnas = split(";", $F[3]);
        my @idx = sort{$scores[$b] <=> $scores[$a]}0..$#scores;
        @idx = grep{$scores[$_] == $scores[$idx[0]]}@idx; # max index with ties
        print BED join("\t", @F[0..2], join(",", do { my %seen; grep { !$seen{$_}++ } map {(split("\\|"))[2]} @trnas[@idx]}), @F[4,5], join(";", @scores[@idx])), "\n";
    }
    close(TMP);
    close(BED);

    run(qq(bedtools intersect -wb -v -f .9 -a $trna_blast_bed -b $trna_bed >$trna_part));
    run(qq(bedtools intersect -wb -f .9 -a $trna_blast_bed -b $trna_bed >$trna_full));
    run(qq(cut -f 1-6 $trna_full | perl -pe 's/\$/\tfull/' >$trna_hits));
    run(qq(cut -f1-6 $trna_part | perl -pe 's/\$/\tpartial/' >>$trna_hits));

    return $trna_hits;
}


sub run{
    my($cmd, $print) = (@_, $debug);
    print "+ $cmd\n" if $print;
    my $log = qx($cmd);
    die $log, "\nDo'h, something went wrong" if $?;
}

sub read_contig_lengths{
    open(FAI, $contig_length_file) or die $!;
    my %S;
    while (<FAI>) {
        my ($id, $foo, $len) = split("\t", $_, 3);
        $S{$id} = $len;
    }
    return \%S;
}

# use aragorn, parser from Torsten Seemanns PROKKA
sub predict_trnas{
    #print STDERR "\nPredicting tRNAs and tmRNAs\n";
    my($fna_file, $trna_bed) = @_;
    my $seq_len = read_contig_lengths();

    my $ver = qx(aragorn -h | grep -oPm1 "ARAGORN v\\K\\S+");
    die $ver if $?;
    chomp($ver);

    open(TRNAOUT, ">", $trna_bed) or die $!;

    # -l : Assume that each sequence has a linear topology. Search does not wrap
    # -w : batch mode
    my $cmd = "aragorn -l -gcstd -w $fna_file"; # -t/-m
    print STDERR "+ $cmd\n";
    my $num_trna=0;
    open TRNA, '-|', $cmd;
    my $sid;
    while (<TRNA>) {
        chomp;
        if (m/^>(\S+)/) {
            $sid = $1;
            next;
        }
        my @x = split m/\s+/;
        next unless @x == 5 and $x[0] =~ m/^\d+$/;
        if ($x[1] =~ m/\?/) {
            msg("tRNA $x[2] is a pseudo/wacky gene - skipping.\n");
            next;
        }
        #msg("@x");
        # in linear mode (-l) we can get -ve coordinates
        $x[2] =~ m/(c)?\[-?(\d+),(\d+)\]/;
        my($revcom, $start, $end) = ($1,$2,$3);
        msg("DBG: $x[2] -> $revcom, $start, $end") if $debug;

        # bug fix for aragorn when revcom trna ends at start of contig!
        #  if (defined $revcom and $start > $end) {
        #    msg("Activating kludge for Aragorn bug for tRNA end at contig start");
        #    $start = 1;
        #  }
        if ($start > $end) {
            msg("tRNA $x[2] has start($start) > end ($end) - skipping.");
            next;
        }

        # correct strange coordinates in -l mode
        $start = max( $start, 1 );
        $end = min( $end, $seq_len->{$sid} );

        if (abs($end-$start) > 500) {
            msg("tRNA/tmRNA $x[2] ($start to $end) is too big (>500bp) - skipping.");
            next;
        }
        # end kludge
        $num_trna++;

        my $ftype = 'tRNA';
        my $product = $x[1].$x[4];
        my @gene = ();
        if ($x[1] =~ m/^(tmRNA)/) {
            $ftype = $1;
            $product = "transfer-messenger RNA, SsrA";
            @gene = ('gene' => 'ssrA')
        }

        print TRNAOUT join("\t", $sid, $start-1, $end-1, $product, ".", $revcom ? "-" : "+", "Aragorn:$ver", $ftype), "\n";
    }
    print STDERR "Found $num_trna tRNAs\n";
    close TRNA;
    close TRNAOUT;
    return $trna_bed;
}

sub msg{
    my ($msg) = @_;
    print STDERR $msg."\n";
}

sub search_att_sites{
    my $seq_len = read_contig_lengths();

    my ($att_out) = @_;
    my $us = 2000;
    my $ds = 30000;

    # blast up- and downstream of int genes against each other
    open(HITS, $irve_hits) or die $!;
    while (<HITS>) {
        $. % 10 || print STDERR "\r$.";
        chomp;
        my @r = split("\t", $_);
        # function
        # (the column location seems to depend on the environemtn used...)
        #next unless grep{$r[13] eq $_}("Tyrosine Recombinase", "Large Serine Recombinase");
        next unless grep{$r[9] eq $_}("Tyrosine Recombinase", "Large Serine Recombinase");
        # don't try to search if we're at the end of the contig/genome
        my $start = max( min($r[5], $r[6]), 1 );
        my $end = min( max($r[5], $r[6]), $seq_len->{$r[4]} );
        next if ( $start == 1 or $end == $seq_len->{$r[4]} );
        # contig_id:4 start:5 end:6 strand:7 protein_id:0
        my $bed = join("\t", @r[4,5,6,0], ".", $r[7]);
        run(qq(
          echo "$bed" | seqkit subseq --quiet -fu $us --bed /dev/fd/0 $fna_file | seqkit seq -pr -v -t DNA | perl -pe 's/^>\\S+\\s(.*)/>\$1.us/' > $out/us.fa
          echo "$bed" | seqkit subseq --quiet -fd $ds --bed /dev/fd/0 $fna_file | perl -pe 's/^>\\S+\\s(.*)/>\$1.ds/' > $out/ds.fa
          blastn -task blastn-short -query $out/us.fa -subject $out/ds.fa -outfmt 7 -reward 3 -penalty -6 -gapopen 9 -gapextend 3 >> $att_out
));
    }
    print STDERR "\n";
    return $att_out;
}
